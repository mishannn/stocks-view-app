{"version":3,"sources":["widgets/StocksList/StocksList.tsx","api/TinkoffTradingApi.ts","layouts/MainLayout.tsx","views/MainView/MainView.tsx","views/StocksDetailsView/StockDetailsView.tsx","App.tsx","index.tsx"],"names":["StocksListComponent","props","getEarningsClassNames","stock","classNames","earnings","relative","push","className","loading","stocks","dataSource","renderItem","Item","onClick","onSelect","handleListItemClick","key","symbol","isin","Meta","avatar","src","title","showName","description","ticker","fixedPrice","price","value","priceCurrency","currency","getPriceText","join","earningsFixedAbsoluteValue","absolute","toFixed","earningsCurrency","earningsFixedRelativeValue","Math","abs","getEarningsText","RequestMethod","TinkoffTradingApi","client","this","axios","create","baseURL","tickers","requestMethod","GetStocks","country","orderType","sortType","stocksList","values","GetStock","dateTo","Date","dateFrom","subDays","GetCandles","from","formatISO","to","resolution","candles","method","params","post","response","payload","data","Error","message","MainLayoutComponent","titleSkeleton","onBack","subTitle","subtitle","children","tradingApi","MainViewComponent","useState","setStocks","useEffect","a","getStocks","console","warn","updateStocks","StockDetailsViewComponent","history","useHistory","useParams","tickerRef","useRef","setStock","setCandles","current","getStock","getCandles","updateStock","candlesChart","labels","map","candle","format","fromUnixTime","date","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","c","options","scales","yAxes","ticks","display","width","height","goBack","AppComponent","basename","process","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fdacfd4.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Avatar } from \"antd\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport \"./StocksList.css\";\n\nexport type SelectEventHandler = (stock: Stock) => void;\n\nexport interface StocksListProps {\n  stocks: Stock[] | undefined;\n  onSelect?: SelectEventHandler;\n}\n\nexport default function StocksListComponent(props: StocksListProps) {\n  const handleListItemClick = (stock: Stock) => {\n    props.onSelect?.(stock);\n  };\n\n  const getPriceText = (stock: Stock) => {\n    const fixedPrice = stock.price.value;\n    const priceCurrency = stock.price.currency;\n\n    return `${fixedPrice} ${priceCurrency}`;\n  }\n\n  const getEarningsClassNames = (stock: Stock) => {\n    const classNames = ['stock-earnings'];\n\n    if (stock.earnings.relative === 0) {\n      return classNames;\n    }\n\n    if (stock.earnings.relative > 0) {\n      classNames.push('positive');\n    } else {\n      classNames.push('negative');\n    }\n\n    return classNames;\n  }\n\n  const getEarningsText = (stock: Stock) => {\n    const earningsFixedAbsoluteValue = stock.earnings.absolute.value.toFixed(2);\n    const earningsCurrency = stock.earnings.absolute.currency;\n    const earningsFixedRelativeValue = Math.abs(stock.earnings.relative * 100).toFixed(2);\n\n    return `${earningsFixedAbsoluteValue} ${earningsCurrency} (${earningsFixedRelativeValue}%)`;\n  }\n\n  const renderListItem = (stock: Stock): JSX.Element => {\n    return (\n      <List.Item\n        onClick={() => handleListItemClick(stock)}\n        className={`item`}\n        key={stock.symbol.isin}\n      >\n        <List.Item.Meta\n          avatar={\n            <Avatar\n              src={`https://static.tinkoff.ru/brands/traiding/${stock.symbol.isin}x160.png`}\n            />\n          }\n          title={stock.symbol.showName}\n          description={stock.symbol.ticker}\n        />\n        <div className=\"content\">\n          <div className=\"stock-price\">\n            {getPriceText(stock)}\n          </div>\n          <div className={getEarningsClassNames(stock).join(' ')}>\n            {getEarningsText(stock)}\n          </div>\n        </div>\n      </List.Item>\n    );\n  };\n\n  return (\n    <List\n      className=\"stocks-list\"\n      loading={!props.stocks}\n      dataSource={props.stocks || []}\n      renderItem={renderListItem}\n    />\n  );\n}\n","import axios, { AxiosInstance, AxiosResponse } from \"axios\";\nimport { Stock, Response, StocksList, Candle, CandlesList } from \"../models/tinkoffTrading\";\nimport { subDays, formatISO } from \"date-fns\";\n\nconst BASE_URL = \"https://api.tinkoff.ru/trading\";\n\nexport enum RequestMethod {\n  GetStocks = \"stocks/list\",\n  GetStock = \"stocks/get\",\n  GetCandles = \"symbols/candles\",\n}\n\nexport default class TinkoffTradingApi {\n  private client!: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: BASE_URL,\n    });\n  }\n\n  async getStocks(tickers: string[]): Promise<Stock[]> {\n    const stocksList = await this.requestMethod<StocksList>(\n      RequestMethod.GetStocks,\n      {\n        tickers,\n        country: \"All\",\n        orderType: \"Desc\",\n        sortType: \"ByPrice\",\n      }\n    );\n\n    return stocksList.values;\n  }\n\n  async getStock(ticker: string): Promise<Stock> {\n    return this.requestMethod(RequestMethod.GetStock, { ticker });\n  }\n\n  async getCandles(ticker: string): Promise<Candle[]> {\n    const dateTo = new Date();\n    const dateFrom = subDays(dateTo, 1);\n\n    const candles = await this.requestMethod<CandlesList>(RequestMethod.GetCandles, {\n      from: formatISO(dateFrom),\n      to: formatISO(dateTo),\n      resolution: 5,\n      ticker,\n    });\n\n    return candles.candles;\n  }\n\n  private async requestMethod<T>(\n    method: RequestMethod,\n    params: any\n  ): Promise<T> {\n    const response: AxiosResponse<Response<T>> = await this.client.post(\n      method,\n      params\n    );\n\n    const payload = response.data.payload;\n\n    if (\"code\" in payload && \"message\" in payload) {\n      throw new Error(payload.message);\n    }\n\n    return payload;\n  }\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { PageHeader } from \"antd\";\nimport \"./MainLayout.css\";\n\nexport interface MainLayoutProps {\n  title?: string;\n  subtitle?: string;\n  onBack?: () => void;\n}\n\nexport default function MainLayoutComponent(\n  props: PropsWithChildren<MainLayoutProps>\n) {\n  const titleSkeleton = <div className=\"title-skeleton\" />;\n\n  return (\n    <div className=\"main-layout\">\n      <PageHeader\n        className=\"header\"\n        onBack={props.onBack}\n        title={props.title || titleSkeleton}\n        subTitle={props.subtitle}\n      />\n      <div className=\"body\">{props.children}</div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport StocksListComponent from \"../../widgets/StocksList/StocksList\";\nimport \"./MainView.css\";\n// import { useHistory } from \"react-router-dom\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport default function MainViewComponent() {\n  // const history = useHistory();\n\n  const [stocks, setStocks] = useState<Stock[]>();\n\n  useEffect(() => {\n    const updateStocks = async (): Promise<void> => {\n      try {\n        setStocks(\n          await tradingApi.getStocks([\n            \"V\",\n            \"ADBE\",\n            \"AAPL\",\n            \"INTC\",\n            \"FB\",\n            \"AMD\",\n            \"GOOGL\",\n            \"GOOG\",\n            \"NVDA\",\n            \"MSFT\",\n            \"MA\",\n            \"EGHT\",\n          ])\n        );\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStocks();\n  }, []);\n\n  const handleStockSelect = (stock: Stock) => {\n    // history.push(`/stock-details/${stock.symbol.ticker}`);\n  };\n\n  return (\n    <MainLayoutComponent title=\"Stocks view\">\n      <div className=\"main-view\">\n        <StocksListComponent stocks={stocks} onSelect={handleStockSelect} />\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport \"./StockDetailsView.css\";\nimport { Stock, Candle } from \"../../models/tinkoffTrading\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\nimport { Line } from \"react-chartjs-2\";\nimport { format, fromUnixTime } from \"date-fns\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport interface StockDetailsViewRouteParams {\n  ticker: string;\n}\n\nexport default function StockDetailsViewComponent() {\n  const history = useHistory();\n  const params = useParams<StockDetailsViewRouteParams>();\n  const tickerRef = useRef<string>();\n  const [stock, setStock] = useState<Stock>();\n  const [candles, setCandles] = useState<Candle[]>();\n\n  useEffect(() => {\n    tickerRef.current = params.ticker;\n  });\n\n  useEffect(() => {\n    const updateStock = async () => {\n      const ticker = tickerRef.current;\n\n      if (!ticker) return;\n\n      try {\n        setStock(await tradingApi.getStock(ticker));\n        setCandles(await tradingApi.getCandles(ticker));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStock();\n  }, [tickerRef]);\n\n  const getChartData = () => ({\n    labels:\n      candles?.map((candle) =>\n        format(fromUnixTime(candle.date), \"HH:mm MM/dd\")\n      ) || [],\n    datasets: [\n      {\n        label: \"Candles\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: candles?.map((candle) => candle.c) || [],\n      },\n    ],\n  });\n\n  const chartOptions = {\n    scales: {\n      // xAxes: [\n      //   {\n      //     ticks: {\n      //       display: false,\n      //     },\n      //   },\n      // ],\n      yAxes: [\n        {\n          ticks: {\n            display: false,\n          },\n        },\n      ],\n    },\n  };\n\n  const candlesChart = (\n    <div className=\"chart-container\">\n      <Line data={getChartData()} options={chartOptions} width={4000} height={400} />\n    </div>\n  );\n\n  return (\n    <MainLayoutComponent\n      title={stock?.symbol.showName}\n      subtitle={stock?.symbol.ticker}\n      onBack={() => history.goBack()}\n    >\n      <div className=\"stock-details-view\">{candles && candlesChart}</div>\n    </MainLayoutComponent>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport MainViewComponent from \"./views/MainView/MainView\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StockDetailsViewComponent from \"./views/StocksDetailsView/StockDetailsView\";\n\nexport function AppComponent() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"stocks-view-app\">\n        <Switch>\n          <Route exact path=\"/\" component={MainViewComponent} />\n          <Route\n            path=\"/stock-details/:ticker\"\n            component={StockDetailsViewComponent}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppComponent } from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}