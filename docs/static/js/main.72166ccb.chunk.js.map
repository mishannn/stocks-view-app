{"version":3,"sources":["api/TinkoffTradingApi.ts","layouts/MainLayout.tsx","store/stocks/types.ts","store/stocks/actions.ts","utils/getCurrencySymbol.ts","widgets/StocksList/StocksList.tsx","store/stocks/store.ts","store/tickers/store.ts","store/store.ts","components/BottomButton/BottomButton.tsx","views/MainView/MainView.tsx","store/tickers/actions.ts","store/tickers/types.ts","views/StocksDetailsView/StockDetailsView.tsx","views/AddStockView/AddStockView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RequestMethod","TinkoffTradingApi","client","this","axios","create","baseURL","tickers","params","country","orderType","sortType","requestMethod","GetStocks","stocksList","values","query","amount","start","end","filter","ticker","GetStock","dateTo","Date","dateFrom","subDays","GetCandles","from","formatISO","to","resolution","candles","method","post","response","payload","data","Error","message","MainLayoutComponent","props","titleSkeleton","className","onBack","title","subTitle","subtitle","extra","children","setStocks","stocks","type","currency","symbol","USD","RUB","StocksListComponent","getEarningsClassNames","stock","classNames","earnings","relative","push","getLogoUrl","logoName","replace","getContent","manage","danger","onClick","onDelete","fixedPrice","price","value","toFixed","priceCurrencySymbol","getCurrencySymbol","getPriceText","join","CaretUpOutlined","CaretDownOutlined","getEarningsCaret","earningsFixedAbsoluteValue","absolute","earningsCurrencySymbol","earningsFixedRelativeValue","Math","abs","getEarningsText","loading","dataSource","renderItem","Item","isin","key","onSelect","handleListItemClick","Meta","avatar","src","showName","description","addStockReducer","state","action","find","removeStockReducer","initialState","undefined","addTickerReducer","includes","localStorage","setItem","JSON","stringify","removeTickerReducer","rootReducer","combineReducers","store","createStore","useAppStore","useSelector","useDispatch","BottomButtonComponent","tradingApi","MainViewComponent","history","useHistory","dispatch","useEffect","updateStocks","a","getStocks","console","warn","intervalStopped","interval","_iteration","stop","icon","PlusOutlined","block","setTickers","addTicker","removeTicker","StockDetailsViewComponent","useParams","tickerRef","useRef","useState","setStock","setCandles","current","updateStock","getStock","updateCandles","getCandles","chart","F2","Chart","id","pixelRatio","window","devicePixelRatio","map","candle","index","date","c","source","formatter","val","tooltip","showCrosshairs","showItemMarker","background","radius","fill","padding","nameStyle","onShow","ev","items","log","name","format","fromUnixTime","origin","area","position","line","axis","interaction","guide","tag","withPoint","content","limitInPlot","offsetX","direct","render","handleRemoveButtonClick","confirm","ExclamationCircleOutlined","centered","okButtonProps","onOk","onCancel","handleAddButtonClick","length","DeleteOutlined","AddStockViewComponent","setQuery","debouncedQuery","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","searchStocks","size","placeholder","onChange","e","currentTarget","prefix","SearchOutlined","bounce","spring","stiffness","damping","AppComponent","basename","process","exact","path","component","tickersJson","getItem","parse","loadTickers","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","href","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.72166ccb.chunk.js","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\nimport {\n  Stock,\n  Response,\n  StocksList,\n  Candle,\n  CandlesList,\n} from \"../models/tinkoffTrading\";\nimport { subDays, formatISO } from \"date-fns\";\n\nconst BASE_URL = \"https://api.tinkoff.ru/trading\";\n\nexport enum RequestMethod {\n  GetStocks = \"stocks/list\",\n  GetStock = \"stocks/get\",\n  GetCandles = \"symbols/candles\",\n}\n\nexport default class TinkoffTradingApi {\n  private client!: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: BASE_URL,\n    });\n  }\n\n  async getStocks(tickers?: string[]): Promise<Stock[]> {\n    const params: any = {\n      tickers,\n      country: \"All\",\n      orderType: \"Desc\",\n      sortType: \"ByEarnings\",\n    };\n\n    if (tickers) {\n      params.tickers = tickers;\n    }\n\n    const stocksList = await this.requestMethod<StocksList>(\n      RequestMethod.GetStocks,\n      params\n    );\n\n    return stocksList.values;\n  }\n\n  async searchStocks(query?: string, amount = 20): Promise<Stock[]> {\n    const params: any = {\n      country: \"All\",\n      orderType: \"Desc\",\n      sortType: \"ByEarnings\",\n      start: 0,\n      end: amount,\n    };\n\n    if (query) {\n      params.filter = query;\n    }\n\n    const stocksList = await this.requestMethod<StocksList>(\n      RequestMethod.GetStocks,\n      params\n    );\n\n    return stocksList.values;\n  }\n\n  async getStock(ticker: string): Promise<Stock> {\n    return this.requestMethod(RequestMethod.GetStock, { ticker });\n  }\n\n  async getCandles(ticker: string): Promise<Candle[]> {\n    const dateTo = new Date();\n    const dateFrom = subDays(dateTo, 1);\n\n    const candles = await this.requestMethod<CandlesList>(\n      RequestMethod.GetCandles,\n      {\n        from: formatISO(dateFrom),\n        to: formatISO(dateTo),\n        resolution: 5,\n        ticker,\n      }\n    );\n\n    return candles.candles;\n  }\n\n  private async requestMethod<T>(\n    method: RequestMethod,\n    params: any\n  ): Promise<T> {\n    const response: AxiosResponse<Response<T>> = await this.client.post(\n      method,\n      params\n    );\n\n    const payload = response.data.payload;\n\n    if (\"code\" in payload && \"message\" in payload) {\n      throw new Error(payload.message);\n    }\n\n    return payload;\n  }\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { PageHeader } from \"antd\";\nimport \"./MainLayout.css\";\n\nexport interface MainLayoutProps {\n  title?: string;\n  subtitle?: string;\n  extra?: React.ReactNode;\n  onBack?: () => void;\n}\n\nexport default function MainLayoutComponent(\n  props: PropsWithChildren<MainLayoutProps>\n) {\n  const titleSkeleton = <div className=\"title-skeleton\" />;\n\n  return (\n    <div className=\"main-layout\">\n      <PageHeader\n        className=\"header\"\n        onBack={props.onBack}\n        title={props.title || titleSkeleton}\n        subTitle={props.subtitle}\n        extra={props.extra}\n      />\n      <div className=\"body\">{props.children}</div>\n    </div>\n  );\n}\n","import { Stock } from \"../../models/tinkoffTrading\";\n\nexport interface StocksState {\n  stocks: Stock[] | undefined;\n}\n\nexport const SET_STOCKS = \"SET_STOCKS\";\nexport const ADD_STOCK = \"ADD_STOCK\";\nexport const REMOVE_STOCK = \"REMOVE_STOCK\";\nexport const CLEAR_STOCKS = \"CLEAR_STOCKS\";\n\nexport interface SetStocksAction {\n  type: typeof SET_STOCKS;\n  stocks: Stock[];\n}\n\nexport interface AddStockAction {\n  type: typeof ADD_STOCK;\n  stock: Stock;\n}\n\nexport interface RemoveStockAction {\n  type: typeof REMOVE_STOCK;\n  stock: Stock;\n}\n\nexport interface ClearStocksAction {\n  type: typeof CLEAR_STOCKS;\n}\n\nexport type StocksActionTypes = SetStocksAction | AddStockAction | RemoveStockAction | ClearStocksAction;","import {\n  AddStockAction,\n  SetStocksAction,\n  RemoveStockAction,\n  ClearStocksAction,\n  REMOVE_STOCK,\n  ADD_STOCK,\n  SET_STOCKS,\n  CLEAR_STOCKS,\n} from \"./types\";\nimport { Stock } from \"../../models/tinkoffTrading\";\n\nexport const setStocks = (stocks: Stock[]): SetStocksAction => ({\n  type: SET_STOCKS,\n  stocks,\n});\n\nexport const addStock = (stock: Stock): AddStockAction => ({\n  type: ADD_STOCK,\n  stock,\n});\n\nexport const removeStock = (stock: Stock): RemoveStockAction => ({\n  type: REMOVE_STOCK,\n  stock,\n});\n\nexport const clearStocks = (): ClearStocksAction => ({\n  type: CLEAR_STOCKS,\n});\n\nexport const mapStocksDispatch = {\n  setStocks,\n  addStock,\n  removeStock,\n  clearStocks,\n};","export default function (currency: string): string {\n  const currencySymbols: any = {\n    USD: \"$\",\n    RUB: \"₽\",\n  };\n\n  const symbol = currencySymbols[currency];\n  if (!symbol) {\n    return currency;\n  }\n\n  return symbol;\n}\n","import React from \"react\";\nimport { List, Avatar, Button } from \"antd\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport { CaretUpOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nimport \"./StocksList.css\";\nimport getCurrencySymbol from \"../../utils/getCurrencySymbol\";\n\nexport type SelectEventHandler = (stock: Stock) => void;\n\nexport interface StocksListProps {\n  stocks?: Stock[];\n  manage?: boolean;\n  onSelect?: SelectEventHandler;\n  onDelete?: SelectEventHandler;\n}\n\nexport default function StocksListComponent(props: StocksListProps) {\n  const handleListItemClick = (stock: Stock) => {\n    props.onSelect?.(stock);\n  };\n\n  const getPriceText = (stock: Stock) => {\n    const fixedPrice = stock.price.value.toFixed(2);\n    const priceCurrencySymbol = getCurrencySymbol(stock.price.currency);\n\n    return `${fixedPrice} ${priceCurrencySymbol}`;\n  };\n\n  const getEarningsClassNames = (stock: Stock) => {\n    const classNames = [\"stock-earnings\"];\n\n    if (stock.earnings.relative === 0) {\n      return classNames;\n    }\n\n    if (stock.earnings.relative > 0) {\n      classNames.push(\"positive\");\n    } else {\n      classNames.push(\"negative\");\n    }\n\n    return classNames;\n  };\n\n  const getEarningsCaret = (stock: Stock) => {\n    if (stock.earnings.relative === 0) {\n      return undefined;\n    }\n\n    return stock.earnings.relative > 0 ? (\n      <CaretUpOutlined className=\"stock-earnings-caret\" />\n    ) : (\n      <CaretDownOutlined className=\"stock-earnings-caret\" />\n    );\n  };\n\n  const getEarningsText = (stock: Stock) => {\n    const earningsFixedAbsoluteValue = stock.earnings.absolute.value.toFixed(2);\n    const earningsCurrencySymbol = getCurrencySymbol(\n      stock.earnings.absolute.currency\n    );\n    const earningsFixedRelativeValue = Math.abs(\n      stock.earnings.relative * 100\n    ).toFixed(2);\n\n    return `${earningsFixedAbsoluteValue} ${earningsCurrencySymbol} (${earningsFixedRelativeValue}%)`;\n  };\n\n  const getLogoUrl = (stock: Stock) => {\n    const logoName = stock.symbol.logoName.replace(\".png\", \"x160.png\");\n    return `https://static.tinkoff.ru/brands/traiding/${logoName}`;\n  };\n\n  const getContent = (stock: Stock) => {\n    if (props.manage) {\n      return (\n        <div className=\"delete-button-container\">\n          <Button type=\"primary\" danger onClick={() => props.onDelete?.(stock)}>\n            Delete\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"price-container\">\n        <div className=\"stock-price\">{getPriceText(stock)}</div>\n        <div className={getEarningsClassNames(stock).join(\" \")}>\n          {getEarningsCaret(stock)}\n          {getEarningsText(stock)}\n        </div>\n      </div>\n    );\n  };\n\n  const renderListItem = (stock: Stock): JSX.Element => {\n    return (\n      <List.Item\n        className={[\"item\", stock.symbol.isin].join(\" \")}\n        key={stock.symbol.isin}\n        onClick={() => handleListItemClick(stock)}\n      >\n        <List.Item.Meta\n          avatar={<Avatar src={getLogoUrl(stock)} />}\n          title={stock.symbol.showName}\n          description={stock.symbol.ticker}\n        />\n        <div className=\"content\">{getContent(stock)}</div>\n      </List.Item>\n    );\n  };\n\n  return (\n    <List\n      className=\"stocks-list\"\n      loading={!props.stocks}\n      dataSource={props.stocks || []}\n      renderItem={renderListItem}\n    />\n  );\n}\n","import {\n  StocksState,\n  StocksActionTypes,\n  RemoveStockAction,\n  AddStockAction,\n} from \"./types\";\n\nconst addStockReducer = (\n  state: StocksState,\n  action: AddStockAction\n): StocksState => {\n  const stocks = state.stocks ? state.stocks : [];\n\n  if (stocks.find((stock) => stock.symbol.isin === action.stock.symbol.isin)) {\n    return state;\n  }\n\n  return { ...state, stocks: [...stocks, action.stock] };\n};\n\nconst removeStockReducer = (\n  state: StocksState,\n  action: RemoveStockAction\n): StocksState => {\n  const stocks = state.stocks ? state.stocks : [];\n\n  if (!stocks.find((stock) => stock.symbol.isin === action.stock.symbol.isin)) {\n    return state;\n  }\n\n  return { ...state, stocks: stocks.filter((stock) => stock !== action.stock) };\n};\n\nconst initialState: StocksState = {\n  stocks: undefined,\n};\n\nexport const stocksReducer = (\n  state = initialState,\n  action: StocksActionTypes\n): StocksState => {\n  switch (action.type) {\n    case \"SET_STOCKS\":\n      return { ...state, stocks: action.stocks };\n\n    case \"ADD_STOCK\":\n      return addStockReducer(state, action);\n\n    case \"REMOVE_STOCK\":\n      return removeStockReducer(state, action);\n\n    case \"CLEAR_STOCKS\":\n      return { ...state, stocks: undefined };\n\n    default:\n      return state;\n  }\n};\n\nexport const mapStocksState = (state: StocksState) => ({\n  stocks: state.stocks,\n});\n","import {\n  TickersState,\n  TickersActionTypes,\n  RemoveTickerAction,\n  AddTickerAction,\n} from \"./types\";\n\nconst addTickerReducer = (\n  state: TickersState,\n  action: AddTickerAction\n): TickersState => {\n  if (state.tickers.includes(action.ticker)) {\n    return state;\n  }\n\n  const tickers = [...state.tickers, action.ticker];\n  localStorage.setItem(\"tickers\", JSON.stringify(tickers));\n\n  return { ...state, tickers };\n};\n\nconst removeTickerReducer = (\n  state: TickersState,\n  action: RemoveTickerAction\n): TickersState => {\n  if (!state.tickers.includes(action.ticker)) {\n    return state;\n  }\n\n  const tickers = state.tickers.filter((ticker) => ticker !== action.ticker);\n  localStorage.setItem(\"tickers\", JSON.stringify(tickers));\n\n  return {\n    ...state,\n    tickers,\n  };\n};\n\nconst initialState: TickersState = {\n  tickers: [\n    \"V\",\n    \"ADBE\",\n    \"AAPL\",\n    \"INTC\",\n    \"FB\",\n    \"AMD\",\n    \"GOOGL\",\n    \"GOOG\",\n    \"NVDA\",\n    \"MSFT\",\n    \"MA\",\n  ],\n};\n\nexport const tickersReducer = (\n  state = initialState,\n  action: TickersActionTypes\n): TickersState => {\n  switch (action.type) {\n    case \"SET_TICKERS\":\n      localStorage.setItem(\"tickers\", JSON.stringify(action.tickers));\n      return { ...state, tickers: action.tickers };\n\n    case \"ADD_TICKER\":\n      return addTickerReducer(state, action);\n\n    case \"REMOVE_TICKER\":\n      return removeTickerReducer(state, action);\n\n    case \"CLEAR_TICKERS\":\n      localStorage.setItem(\"tickers\", \"[]\");\n      return { ...state, tickers: [] };\n\n    default:\n      return state;\n  }\n};\n\nexport const mapTickersState = (state: TickersState) => ({\n  tickers: state.tickers,\n});\n","import { stocksReducer } from \"./stocks/store\";\nimport { tickersReducer } from \"./tickers/store\";\nimport { combineReducers, createStore } from \"redux\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport const rootReducer = combineReducers({\n  stocks: stocksReducer,\n  tickers: tickersReducer,\n});\n\nexport const store = createStore(rootReducer);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useAppSelector = () => useSelector((state: RootState) => state);\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useAppStore = (): [RootState, AppDispatch] => [useAppSelector(), useAppDispatch()];\n","import React from \"react\";\nimport { PropsWithChildren } from \"react\";\nimport Button, { ButtonProps } from \"antd/lib/button\";\nimport \"./BottomButton.css\";\n\nexport default function BottomButtonComponent(\n  props: PropsWithChildren<ButtonProps>\n) {\n  return (\n    <Button className=\"bottom-button\" {...props}>\n      {props.children}\n    </Button>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./MainView.css\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\nimport { setStocks } from \"../../store/stocks/actions\";\nimport StocksListComponent from \"../../widgets/StocksList/StocksList\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport { useAppStore } from \"../../store/store\";\n// import { Button } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { Link, useHistory } from \"react-router-dom\";\n// import { removeTicker } from \"../../store/tickers/actions\";\n// import confirm from \"antd/lib/modal/confirm\";\n// import { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport interval from \"interval-promise\";\nimport BottomButtonComponent from \"../../components/BottomButton/BottomButton\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport default function MainViewComponent() {\n  const history = useHistory();\n  const [state, dispatch] = useAppStore();\n  // const [manageModeEnabled, setManageModeEnabled] = useState(false);\n  // const tickers = useSelector((state: RootState) => state.tickers.tickers);\n\n  useEffect(() => {\n    const updateStocks = async (): Promise<void> => {\n      try {\n        const stocks = await tradingApi.getStocks(state.tickers.tickers);\n        dispatch(setStocks(stocks));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStocks();\n\n    let intervalStopped = false;\n    interval(async (_iteration, stop) => {\n      if (intervalStopped) {\n        stop();\n        return;\n      }\n\n      return updateStocks();\n    }, 5000);\n\n    return () => {\n      intervalStopped = true;\n    };\n  }, [dispatch, state.tickers.tickers]);\n\n  const handleStockSelect = (stock: Stock) => {\n    history.push(`/stock-details/${stock.symbol.ticker}`);\n  };\n\n  // const handleStockDelete = (stock: Stock) => {\n  //   confirm({\n  //     title: `Do you want to delete ${stock.symbol.showName}?`,\n  //     icon: <ExclamationCircleOutlined />,\n  //     centered: true,\n  //     okButtonProps: {\n  //       type: \"primary\",\n  //       danger: true,\n  //     },\n  //     onOk() {\n  //       dispatch(removeTicker(stock.symbol.ticker));\n  //     },\n  //     onCancel() {},\n  //   });\n  // };\n\n  // const handleManageButtonClick = () => {\n  //   setManageModeEnabled(!manageModeEnabled);\n  // };\n\n  return (\n    <MainLayoutComponent\n      title=\"Stocks\"\n      // extra={[\n      //   <Button\n      //     key=\"1\"\n      //     onClick={handleManageButtonClick}\n      //     type={manageModeEnabled ? \"primary\" : \"default\"}\n      //   >\n      //     {manageModeEnabled ? \"Finish\" : \"Manage\"}\n      //   </Button>,\n      // ]}\n    >\n      <div className=\"main-view\">\n        <div className=\"stock-list-container\">\n          <StocksListComponent\n            stocks={state.stocks.stocks}\n            // manage={manageModeEnabled}\n            onSelect={handleStockSelect}\n            // onDelete={handleStockDelete}\n          />\n        </div>\n        {/* {!manageModeEnabled && ( */}\n        <Link to=\"/add-stock\">\n          <BottomButtonComponent type=\"primary\" icon={<PlusOutlined />} block>\n            Add stock\n          </BottomButtonComponent>\n        </Link>\n        {/* )} */}\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import {\n  AddTickerAction,\n  ADD_TICKER,\n  RemoveTickerAction,\n  REMOVE_TICKER,\n  SET_TICKERS,\n  SetTickersAction,\n  ClearTickersAction,\n  CLEAR_TICKERS,\n} from \"./types\";\n\nexport const setTickers = (tickers: string[]): SetTickersAction => ({\n  type: SET_TICKERS,\n  tickers,\n});\n\nexport const addTicker = (ticker: string): AddTickerAction => ({\n  type: ADD_TICKER,\n  ticker,\n});\n\nexport const removeTicker = (ticker: string): RemoveTickerAction => ({\n  type: REMOVE_TICKER,\n  ticker,\n});\n\nexport const clearTickers = (): ClearTickersAction => ({\n  type: CLEAR_TICKERS,\n});\n\nexport const mapTickersDispatch = {\n  setTickers,\n  addTicker,\n  removeTicker,\n  clearTickers,\n};\n","export const SET_TICKERS = \"SET_TICKERS\";\nexport const ADD_TICKER = \"ADD_TICKER\";\nexport const REMOVE_TICKER = \"REMOVE_TICKER\";\nexport const CLEAR_TICKERS = \"CLEAR_TICKERS\";\n\nexport interface TickersState {\n  tickers: string[];\n}\n\nexport interface SetTickersAction {\n  type: typeof SET_TICKERS;\n  tickers: string[];\n}\n\nexport interface AddTickerAction {\n  type: typeof ADD_TICKER;\n  ticker: string;\n}\n\nexport interface RemoveTickerAction {\n  type: typeof REMOVE_TICKER;\n  ticker: string;\n}\n\nexport interface ClearTickersAction {\n  type: typeof CLEAR_TICKERS;\n}\n\nexport type TickersActionTypes = SetTickersAction | AddTickerAction | RemoveTickerAction | ClearTickersAction;","import React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport \"./StockDetailsView.css\";\nimport { Stock, Candle } from \"../../models/tinkoffTrading\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\n// @ts-ignore\nimport F2 from \"@antv/f2/lib/index-all\";\nimport { format, fromUnixTime } from \"date-fns\";\nimport interval from \"interval-promise\";\nimport getCurrencySymbol from \"../../utils/getCurrencySymbol\";\nimport BottomButtonComponent from \"../../components/BottomButton/BottomButton\";\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport confirm from \"antd/lib/modal/confirm\";\nimport { removeTicker, addTicker } from \"../../store/tickers/actions\";\nimport { useAppStore } from \"../../store/store\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport interface StockDetailsViewRouteParams {\n  ticker: string;\n}\n\nexport default function StockDetailsViewComponent() {\n  const history = useHistory();\n  const [state, dispatch] = useAppStore();\n  const params = useParams<StockDetailsViewRouteParams>();\n  const tickerRef = useRef<string>();\n  const [stock, setStock] = useState<Stock>();\n  const [candles, setCandles] = useState<Candle[]>();\n\n  useEffect(() => {\n    tickerRef.current = params.ticker;\n  });\n\n  useEffect(() => {\n    const updateStock = async () => {\n      const ticker = tickerRef.current;\n      if (!ticker) return;\n\n      try {\n        const stock = await tradingApi.getStock(ticker);\n        setStock(stock);\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    const updateCandles = async () => {\n      const ticker = tickerRef.current;\n      if (!ticker) return;\n\n      try {\n        const candles = await tradingApi.getCandles(ticker);\n        setCandles(candles);\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStock();\n    updateCandles();\n\n    // let intervalStopped = false;\n    // interval(async (_iteration, stop) => {\n    //   if (intervalStopped) {\n    //     stop();\n    //     return;\n    //   }\n\n    //   return updateStock();\n    // }, 2500);\n\n    // return () => {\n    //   intervalStopped = true;\n    // };\n  }, [tickerRef]);\n\n  useEffect(() => {\n    if (!candles || !stock) return;\n\n    // const data = {\n    //   labels: candles.map((candle) =>\n    //     format(fromUnixTime(candle.date), \"HH:mm\")\n    //   ),\n    //   datasets: [\n    //     {\n    //       name: \"Price\",\n    //       type: \"bar\",\n    //       values: candles?.map((candle) => candle.c),\n    //     },\n    //   ],\n    // };\n\n    // new Chart(\"#chart\", {\n    //   data: data,\n    //   type: \"bar\",\n    //   height: 250,\n    //   colors: [\"#1890ff\"],\n    // });\n\n    const chart = new F2.Chart({\n      id: \"chart\",\n      pixelRatio: window.devicePixelRatio,\n      // padding: ['auto', 0, 0, 'auto'],\n      // appendPadding: [15, 0, 0, 15],\n    });\n\n    const data = candles.map((candle, index) => ({\n      index,\n      date: candle.date,\n      price: candle.c,\n    }));\n\n    // const dateMax = data[data.length - 1].date;\n    // const dateMin = dateMax - 24 * 3600;\n\n    chart.source(data, {\n      price: {\n        formatter: (val: number) => {\n          return `${val.toFixed(2)} ${getCurrencySymbol(stock.price.currency)}`;\n        },\n      },\n    });\n    chart.tooltip({\n      showCrosshairs: true,\n      showItemMarker: false,\n      background: {\n        radius: 2,\n        fill: \"#1890FF\",\n        padding: [3, 5],\n      },\n      nameStyle: {\n        fill: \"#fff\",\n      },\n      onShow: (ev: any) => {\n        const items = ev.items;\n        console.log(items);\n        items[0].name = format(\n          fromUnixTime(items[0].origin.date),\n          \"HH:mm MM/dd\"\n        );\n        items[0].value = `${items[0].value} ${getCurrencySymbol(\n          stock.price.currency\n        )}`;\n      },\n    });\n    chart.area().position(\"index*price\");\n    chart.line().position(\"index*price\");\n    chart.axis(\"index\", false);\n\n    chart.interaction(\"pan\");\n    // chart.scrollBar({\n    //   mode: \"x\",\n    //   xStyle: {\n    //     offsetY: -5,\n    //   },\n    // });\n\n    chart.guide().tag({\n      position: [1969, 1344],\n      withPoint: false,\n      content: \"1,344\",\n      limitInPlot: true,\n      offsetX: 5,\n      direct: \"cr\",\n    });\n    chart.render();\n  }, [candles, stock]);\n\n  const handleRemoveButtonClick = () => {\n    confirm({\n      title: `Do you want to delete ${\n        stock?.symbol.showName || params.ticker\n      }?`,\n      icon: <ExclamationCircleOutlined />,\n      centered: true,\n      okButtonProps: {\n        type: \"primary\",\n        danger: true,\n      },\n      onOk() {\n        dispatch(removeTicker(params.ticker));\n        history.push(\"/\");\n      },\n      onCancel() {},\n    });\n  };\n\n  const handleAddButtonClick = () => {\n    dispatch(addTicker(params.ticker));\n    history.push(\"/\");\n  };\n\n  const isStockAdded = () => {\n    return state.tickers.tickers.includes(params.ticker);\n  };\n\n  const getStockActionButton = () => {\n    if (isStockAdded()) {\n      return (\n        <BottomButtonComponent\n          type=\"primary\"\n          danger\n          icon={<DeleteOutlined />}\n          block\n          onClick={handleRemoveButtonClick}\n        >\n          Remove\n        </BottomButtonComponent>\n      );\n    }\n\n    return (\n      <BottomButtonComponent\n        type=\"primary\"\n        icon={<PlusOutlined />}\n        block\n        onClick={handleAddButtonClick}\n      >\n        Add\n      </BottomButtonComponent>\n    );\n  };\n\n  return (\n    <MainLayoutComponent\n      title={stock?.symbol.showName}\n      subtitle={stock?.symbol.ticker}\n    >\n      <div className=\"stock-details-view\">\n        <div className=\"details-container\">\n          {candles && stock && (\n            <div className=\"details\">\n              <canvas className=\"chart-canvas\" id=\"chart\" />\n              <div className=\"details-price\">\n                {candles[candles.length - 1].c}{\" \"}\n                {getCurrencySymbol(stock.price.currency)}\n              </div>\n            </div>\n          )}\n        </div>\n        {getStockActionButton()}\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./AddStockView.css\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport StocksListComponent from \"../../widgets/StocksList/StocksList\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppStore } from \"../../store/store\";\nimport { addTicker } from \"../../store/tickers/actions\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\nexport default function AddStockViewComponent() {\n  const history = useHistory();\n  const [query, setQuery] = useState<string>();\n  const [stocks, setStocks] = useState<Stock[]>();\n  const debouncedQuery = useDebounce(query, 200);\n  const [, dispatch] = useAppStore();\n\n  useEffect(() => {\n    const updateStocks = async (): Promise<void> => {\n      try {\n        const stocks = await tradingApi.searchStocks(debouncedQuery);\n        setStocks(stocks);\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStocks();\n\n    return () => {\n      setStocks(undefined);\n    };\n  }, [debouncedQuery]);\n\n  const handleStockSelect = (stock: Stock) => {\n    history.push(`/stock-details/${stock.symbol.ticker}`);\n  };\n\n  return (\n    <MainLayoutComponent title=\"Add new stock\">\n      <div className=\"add-stock-view\">\n        <div className=\"search-container\">\n          <Input\n            size=\"large\"\n            placeholder=\"Enter stock ticker or name\"\n            value={query}\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            prefix={<SearchOutlined />}\n          />\n        </div>\n        <div className=\"stocks-list-container\">\n          <StocksListComponent stocks={stocks} onSelect={handleStockSelect} />\n        </div>\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport MainViewComponent from \"./views/MainView/MainView\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport StockDetailsViewComponent from \"./views/StocksDetailsView/StockDetailsView\";\nimport AddStockViewComponent from \"./views/AddStockView/AddStockView\";\n// @ts-ignore\nimport { AnimatedSwitch, spring } from \"react-router-transition\";\nimport { useAppStore, store } from \"./store/store\";\nimport { setTickers } from \"./store/tickers/actions\";\nimport { Switch } from \"react-router-dom\";\n\n// we need to map the `scale` prop we define below\n// to the transform style property\nfunction mapStyles(styles: any) {\n  return {\n    opacity: styles.opacity,\n    transform: `scale(${styles.scale})`,\n  };\n}\n\n// wrap the `spring` helper to use a bouncy config\nfunction bounce(val: any) {\n  return spring(val, {\n    stiffness: 330,\n    damping: 22,\n  });\n}\n\n// child matches will...\nconst bounceTransition = {\n  // start in a transparent, upscaled state\n  atEnter: {\n    opacity: 0,\n    scale: 1.2,\n  },\n  // leave in a transparent, downscaled state\n  atLeave: {\n    opacity: bounce(0),\n    scale: bounce(0.8),\n  },\n  // and rest at an opaque, normally-scaled state\n  atActive: {\n    opacity: bounce(1),\n    scale: bounce(1),\n  },\n};\n\nfunction loadTickers() {\n  try {\n    const tickersJson = localStorage.getItem(\"tickers\");\n    if (!tickersJson) {\n      throw new Error();\n    }\n\n    const tickers = JSON.parse(tickersJson);\n    store.dispatch(setTickers(tickers));\n  } catch (e) {}\n}\n\nloadTickers();\n\nexport function AppComponent() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"stocks-view-app\">\n        <Switch>\n          {/* <AnimatedSwitch\n          atEnter={bounceTransition.atEnter}\n          atLeave={bounceTransition.atLeave}\n          atActive={bounceTransition.atActive}\n          mapStyles={mapStyles}\n          className=\"route-wrapper\"\n        > */}\n          <Route exact path=\"/\" component={MainViewComponent} />\n          <Route\n            path=\"/stock-details/:ticker\"\n            component={StockDetailsViewComponent}\n          />\n          <Route path=\"/add-stock\" component={AddStockViewComponent} />\n          {/* </AnimatedSwitch> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppComponent } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={store}>\n    <AppComponent />\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register({});\n"],"sourceRoot":""}