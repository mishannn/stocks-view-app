{"version":3,"sources":["api/TinkoffTradingApi.ts","layouts/MainLayout.tsx","store/stocks/types.ts","store/stocks/actions.ts","widgets/StocksList/StocksList.tsx","store/stocks/store.ts","store/tickers/store.ts","store/store.ts","store/tickers/actions.ts","store/tickers/types.ts","views/MainView/MainView.tsx","views/StocksDetailsView/StockDetailsView.tsx","views/AddStockView/AddStockView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RequestMethod","TinkoffTradingApi","client","this","axios","create","baseURL","tickers","params","country","orderType","sortType","requestMethod","GetStocks","stocksList","values","query","amount","start","end","filter","ticker","GetStock","dateTo","Date","dateFrom","subDays","GetCandles","from","formatISO","to","resolution","candles","method","post","response","payload","data","Error","message","MainLayoutComponent","props","titleSkeleton","className","onBack","title","subTitle","subtitle","children","setStocks","stocks","type","buttonPressTimer","undefined","StocksListComponent","handleButtonPress","stock","setTimeout","onLongPress","handleButtonRelease","clearTimeout","useEffect","getEarningsClassNames","classNames","earnings","relative","push","getLogoUrl","logoName","symbol","replace","loading","dataSource","renderItem","Item","isin","join","key","onClick","onSelect","handleListItemClick","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","onMouseMove","onTouchMove","Meta","avatar","src","showName","description","fixedPrice","price","value","toFixed","priceCurrency","currency","getPriceText","earningsFixedAbsoluteValue","absolute","earningsCurrency","earningsFixedRelativeValue","Math","abs","getEarningsText","addStockReducer","state","action","includes","removeStockReducer","initialState","addTickerReducer","localStorage","setItem","JSON","stringify","removeTickerReducer","rootReducer","combineReducers","store","createStore","useAppStore","useSelector","useDispatch","setTickers","addTicker","removeTicker","tradingApi","MainViewComponent","dispatch","a","getStocks","console","warn","updateStocks","confirm","icon","ExclamationCircleOutlined","centered","onOk","onCancel","PlusOutlined","block","StockDetailsViewComponent","useParams","tickerRef","useRef","useState","setStock","setCandles","current","getStock","getCandles","updateStock","candlesChart","labels","map","candle","format","fromUnixTime","date","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","c","options","scales","yAxes","ticks","display","width","height","AddStockViewComponent","history","useHistory","setQuery","debouncedQuery","delay","debouncedValue","setDebouncedValue","handler","useDebounce","searchStocks","size","placeholder","onChange","e","currentTarget","prefix","SearchOutlined","mapStyles","styles","opacity","transform","scale","bounce","val","spring","stiffness","damping","bounceTransition","atEnter","atLeave","atActive","AppComponent","tickersJson","getItem","parse","basename","process","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.80077e04.chunk.js","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\nimport {\n  Stock,\n  Response,\n  StocksList,\n  Candle,\n  CandlesList,\n} from \"../models/tinkoffTrading\";\nimport { subDays, formatISO } from \"date-fns\";\n\nconst BASE_URL = \"https://api.tinkoff.ru/trading\";\n\nexport enum RequestMethod {\n  GetStocks = \"stocks/list\",\n  GetStock = \"stocks/get\",\n  GetCandles = \"symbols/candles\",\n}\n\nexport default class TinkoffTradingApi {\n  private client!: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: BASE_URL,\n    });\n  }\n\n  async getStocks(tickers?: string[]): Promise<Stock[]> {\n    const params: any = {\n      tickers,\n      country: \"All\",\n      orderType: \"Desc\",\n      sortType: \"ByEarnings\",\n    };\n\n    if (tickers) {\n      params.tickers = tickers;\n    }\n\n    const stocksList = await this.requestMethod<StocksList>(\n      RequestMethod.GetStocks,\n      params\n    );\n\n    return stocksList.values;\n  }\n\n  async searchStocks(query?: string, amount = 20): Promise<Stock[]> {\n    const params: any = {\n      country: \"All\",\n      orderType: \"Desc\",\n      sortType: \"ByEarnings\",\n      start: 0,\n      end: amount,\n    };\n\n    if (query) {\n      params.filter = query;\n    }\n\n    const stocksList = await this.requestMethod<StocksList>(\n      RequestMethod.GetStocks,\n      params\n    );\n\n    return stocksList.values;\n  }\n\n  async getStock(ticker: string): Promise<Stock> {\n    return this.requestMethod(RequestMethod.GetStock, { ticker });\n  }\n\n  async getCandles(ticker: string): Promise<Candle[]> {\n    const dateTo = new Date();\n    const dateFrom = subDays(dateTo, 1);\n\n    const candles = await this.requestMethod<CandlesList>(\n      RequestMethod.GetCandles,\n      {\n        from: formatISO(dateFrom),\n        to: formatISO(dateTo),\n        resolution: 5,\n        ticker,\n      }\n    );\n\n    return candles.candles;\n  }\n\n  private async requestMethod<T>(\n    method: RequestMethod,\n    params: any\n  ): Promise<T> {\n    const response: AxiosResponse<Response<T>> = await this.client.post(\n      method,\n      params\n    );\n\n    const payload = response.data.payload;\n\n    if (\"code\" in payload && \"message\" in payload) {\n      throw new Error(payload.message);\n    }\n\n    return payload;\n  }\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { PageHeader } from \"antd\";\nimport \"./MainLayout.css\";\n\nexport interface MainLayoutProps {\n  title?: string;\n  subtitle?: string;\n  onBack?: () => void;\n}\n\nexport default function MainLayoutComponent(\n  props: PropsWithChildren<MainLayoutProps>\n) {\n  const titleSkeleton = <div className=\"title-skeleton\" />;\n\n  return (\n    <div className=\"main-layout\">\n      <PageHeader\n        className=\"header\"\n        onBack={props.onBack}\n        title={props.title || titleSkeleton}\n        subTitle={props.subtitle}\n      />\n      <div className=\"body\">{props.children}</div>\n    </div>\n  );\n}\n","import { Stock } from \"../../models/tinkoffTrading\";\n\nexport interface StocksState {\n  stocks: Stock[];\n}\n\nexport const SET_STOCKS = \"SET_STOCKS\";\nexport const ADD_STOCK = \"ADD_STOCK\";\nexport const REMOVE_STOCK = \"REMOVE_STOCK\";\nexport const CLEAR_STOCKS = \"CLEAR_STOCKS\";\n\nexport interface SetStocksAction {\n  type: typeof SET_STOCKS;\n  stocks: Stock[];\n}\n\nexport interface AddStockAction {\n  type: typeof ADD_STOCK;\n  stock: Stock;\n}\n\nexport interface RemoveStockAction {\n  type: typeof REMOVE_STOCK;\n  stock: Stock;\n}\n\nexport interface ClearStocksAction {\n  type: typeof CLEAR_STOCKS;\n}\n\nexport type StocksActionTypes = SetStocksAction | AddStockAction | RemoveStockAction | ClearStocksAction;","import {\n  AddStockAction,\n  SetStocksAction,\n  RemoveStockAction,\n  ClearStocksAction,\n  REMOVE_STOCK,\n  ADD_STOCK,\n  SET_STOCKS,\n  CLEAR_STOCKS,\n} from \"./types\";\nimport { Stock } from \"../../models/tinkoffTrading\";\n\nexport const setStocks = (stocks: Stock[]): SetStocksAction => ({\n  type: SET_STOCKS,\n  stocks,\n});\n\nexport const addStock = (stock: Stock): AddStockAction => ({\n  type: ADD_STOCK,\n  stock,\n});\n\nexport const removeStock = (stock: Stock): RemoveStockAction => ({\n  type: REMOVE_STOCK,\n  stock,\n});\n\nexport const clearStocks = (): ClearStocksAction => ({\n  type: CLEAR_STOCKS,\n});\n\nexport const mapStocksDispatch = {\n  setStocks,\n  addStock,\n  removeStock,\n  clearStocks,\n};","import React, { useEffect } from \"react\";\nimport { List, Avatar } from \"antd\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport \"./StocksList.css\";\n\nexport type SelectEventHandler = (stock: Stock) => void;\n\nexport interface StocksListProps {\n  stocks: Stock[] | undefined;\n  onSelect?: SelectEventHandler;\n  onLongPress?: SelectEventHandler;\n}\n\nlet buttonPressTimer: NodeJS.Timeout | undefined = undefined;\n\nexport default function StocksListComponent(props: StocksListProps) {\n  const handleButtonPress = (stock: Stock) => {\n    buttonPressTimer = setTimeout(() => props.onLongPress?.(stock), 500);\n  };\n\n  const handleButtonRelease = () => {\n    if (buttonPressTimer) {\n      clearTimeout(buttonPressTimer);\n      buttonPressTimer = undefined;\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (buttonPressTimer) {\n        clearTimeout(buttonPressTimer);\n        buttonPressTimer = undefined;\n      }\n    };\n  }, []);\n\n  const handleListItemClick = (stock: Stock) => {\n    props.onSelect?.(stock);\n  };\n\n  const getPriceText = (stock: Stock) => {\n    const fixedPrice = stock.price.value.toFixed(2);\n    const priceCurrency = stock.price.currency;\n\n    return `${fixedPrice} ${priceCurrency}`;\n  };\n\n  const getEarningsClassNames = (stock: Stock) => {\n    const classNames = [\"stock-earnings\"];\n\n    if (stock.earnings.relative === 0) {\n      return classNames;\n    }\n\n    if (stock.earnings.relative > 0) {\n      classNames.push(\"positive\");\n    } else {\n      classNames.push(\"negative\");\n    }\n\n    return classNames;\n  };\n\n  const getEarningsText = (stock: Stock) => {\n    const earningsFixedAbsoluteValue = stock.earnings.absolute.value.toFixed(2);\n    const earningsCurrency = stock.earnings.absolute.currency;\n    const earningsFixedRelativeValue = Math.abs(\n      stock.earnings.relative * 100\n    ).toFixed(2);\n\n    return `${earningsFixedAbsoluteValue} ${earningsCurrency} (${earningsFixedRelativeValue}%)`;\n  };\n\n  const getLogoUrl = (stock: Stock) => {\n    const logoName = stock.symbol.logoName.replace(\".png\", \"x160.png\");\n    return `https://static.tinkoff.ru/brands/traiding/${logoName}`;\n  };\n\n  const renderListItem = (stock: Stock): JSX.Element => {\n    return (\n      <List.Item\n        className={[\"item\", stock.symbol.isin].join(\" \")}\n        key={stock.symbol.isin}\n        onClick={() => handleListItemClick(stock)}\n        onTouchStart={() => handleButtonPress(stock)}\n        onTouchEnd={handleButtonRelease}\n        onMouseDown={() => handleButtonPress(stock)}\n        onMouseUp={handleButtonRelease}\n        onMouseLeave={handleButtonRelease}\n        onMouseMove={handleButtonRelease}\n        onTouchMove={handleButtonRelease}\n      >\n        <List.Item.Meta\n          avatar={<Avatar src={getLogoUrl(stock)} />}\n          title={stock.symbol.showName}\n          description={stock.symbol.ticker}\n        />\n        <div className=\"content\">\n          <div className=\"stock-price\">{getPriceText(stock)}</div>\n          <div className={getEarningsClassNames(stock).join(\" \")}>\n            {getEarningsText(stock)}\n          </div>\n        </div>\n      </List.Item>\n    );\n  };\n\n  return (\n    <List\n      className=\"stocks-list\"\n      loading={!props.stocks}\n      dataSource={props.stocks || []}\n      renderItem={renderListItem}\n    />\n  );\n}\n","import {\n  StocksState,\n  StocksActionTypes,\n  RemoveStockAction,\n  AddStockAction,\n} from \"./types\";\n\nconst addStockReducer = (\n  state: StocksState,\n  action: AddStockAction\n): StocksState => {\n  if (state.stocks.includes(action.stock)) {\n    return state;\n  }\n  return { ...state, stocks: [...state.stocks, action.stock] };\n};\n\nconst removeStockReducer = (\n  state: StocksState,\n  action: RemoveStockAction\n): StocksState => {\n  if (state.stocks.includes(action.stock)) {\n    return state;\n  }\n  return {\n    ...state,\n    stocks: state.stocks.filter((stock) => stock !== action.stock),\n  };\n};\n\nconst initialState: StocksState = {\n  stocks: [],\n};\n\nexport const stocksReducer = (\n  state = initialState,\n  action: StocksActionTypes\n): StocksState => {\n  switch (action.type) {\n    case \"SET_STOCKS\":\n      return { ...state, stocks: action.stocks };\n\n    case \"ADD_STOCK\":\n      return addStockReducer(state, action);\n\n    case \"REMOVE_STOCK\":\n      return removeStockReducer(state, action);\n\n    case \"CLEAR_STOCKS\":\n      return { ...state, stocks: [] };\n\n    default:\n      return state;\n  }\n};\n\nexport const mapStocksState = (state: StocksState) => ({\n  stocks: state.stocks,\n});\n","import {\n  TickersState,\n  TickersActionTypes,\n  RemoveTickerAction,\n  AddTickerAction,\n} from \"./types\";\n\nconst addTickerReducer = (\n  state: TickersState,\n  action: AddTickerAction\n): TickersState => {\n  if (state.tickers.includes(action.ticker)) {\n    return state;\n  }\n\n  const tickers = [...state.tickers, action.ticker];\n  localStorage.setItem(\"tickers\", JSON.stringify(tickers));\n\n  return { ...state, tickers };\n};\n\nconst removeTickerReducer = (\n  state: TickersState,\n  action: RemoveTickerAction\n): TickersState => {\n  if (!state.tickers.includes(action.ticker)) {\n    return state;\n  }\n\n  const tickers = state.tickers.filter((ticker) => ticker !== action.ticker);\n  localStorage.setItem(\"tickers\", JSON.stringify(tickers));\n\n  return {\n    ...state,\n    tickers,\n  };\n};\n\nconst initialState: TickersState = {\n  tickers: [\n    \"V\",\n    \"ADBE\",\n    \"AAPL\",\n    \"INTC\",\n    \"FB\",\n    \"AMD\",\n    \"GOOGL\",\n    \"GOOG\",\n    \"NVDA\",\n    \"MSFT\",\n    \"MA\",\n  ],\n};\n\nexport const tickersReducer = (\n  state = initialState,\n  action: TickersActionTypes\n): TickersState => {\n  switch (action.type) {\n    case \"SET_TICKERS\":\n      localStorage.setItem(\"tickers\", JSON.stringify(action.tickers));\n      return { ...state, tickers: action.tickers };\n\n    case \"ADD_TICKER\":\n      return addTickerReducer(state, action);\n\n    case \"REMOVE_TICKER\":\n      return removeTickerReducer(state, action);\n\n    case \"CLEAR_TICKERS\":\n      localStorage.setItem(\"tickers\", \"[]\");\n      return { ...state, tickers: [] };\n\n    default:\n      return state;\n  }\n};\n\nexport const mapTickersState = (state: TickersState) => ({\n  tickers: state.tickers,\n});\n","import { stocksReducer } from \"./stocks/store\";\nimport { tickersReducer } from \"./tickers/store\";\nimport { combineReducers, createStore } from \"redux\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport const rootReducer = combineReducers({\n  stocks: stocksReducer,\n  tickers: tickersReducer,\n});\n\nexport const store = createStore(rootReducer);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useAppSelector = () => useSelector((state: RootState) => state);\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useAppStore = (): [RootState, AppDispatch] => [useAppSelector(), useAppDispatch()];\n","import {\n  AddTickerAction,\n  ADD_TICKER,\n  RemoveTickerAction,\n  REMOVE_TICKER,\n  SET_TICKERS,\n  SetTickersAction,\n  ClearTickersAction,\n  CLEAR_TICKERS,\n} from \"./types\";\n\nexport const setTickers = (tickers: string[]): SetTickersAction => ({\n  type: SET_TICKERS,\n  tickers,\n});\n\nexport const addTicker = (ticker: string): AddTickerAction => ({\n  type: ADD_TICKER,\n  ticker,\n});\n\nexport const removeTicker = (ticker: string): RemoveTickerAction => ({\n  type: REMOVE_TICKER,\n  ticker,\n});\n\nexport const clearTickers = (): ClearTickersAction => ({\n  type: CLEAR_TICKERS,\n});\n\nexport const mapTickersDispatch = {\n  setTickers,\n  addTicker,\n  removeTicker,\n  clearTickers,\n};\n","export const SET_TICKERS = \"SET_TICKERS\";\nexport const ADD_TICKER = \"ADD_TICKER\";\nexport const REMOVE_TICKER = \"REMOVE_TICKER\";\nexport const CLEAR_TICKERS = \"CLEAR_TICKERS\";\n\nexport interface TickersState {\n  tickers: string[];\n}\n\nexport interface SetTickersAction {\n  type: typeof SET_TICKERS;\n  tickers: string[];\n}\n\nexport interface AddTickerAction {\n  type: typeof ADD_TICKER;\n  ticker: string;\n}\n\nexport interface RemoveTickerAction {\n  type: typeof REMOVE_TICKER;\n  ticker: string;\n}\n\nexport interface ClearTickersAction {\n  type: typeof CLEAR_TICKERS;\n}\n\nexport type TickersActionTypes = SetTickersAction | AddTickerAction | RemoveTickerAction | ClearTickersAction;","import React, { useEffect } from \"react\";\nimport \"./MainView.css\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\nimport { setStocks } from \"../../store/stocks/actions\";\nimport StocksListComponent from \"../../widgets/StocksList/StocksList\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport { useAppStore } from \"../../store/store\";\nimport { Button } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { removeTicker } from \"../../store/tickers/actions\";\nimport confirm from \"antd/lib/modal/confirm\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport default function MainViewComponent() {\n  const [state, dispatch] = useAppStore();\n  // const tickers = useSelector((state: RootState) => state.tickers.tickers);\n\n  useEffect(() => {\n    const updateStocks = async (): Promise<void> => {\n      try {\n        const stocks = await tradingApi.getStocks(state.tickers.tickers);\n        dispatch(setStocks(stocks));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStocks();\n  }, [dispatch, state.tickers.tickers]);\n\n  const handleStockSelect = (stock: Stock) => {\n    // history.push(`/stock-details/${stock.symbol.ticker}`);\n  };\n\n  const handleStockLongPress = (stock: Stock) => {\n    confirm({\n      title: `Do you want to delete ${stock.symbol.showName}?`,\n      icon: <ExclamationCircleOutlined />,\n      centered: true,\n      // content:\n      //   \"When clicked the OK button, this dialog will be closed after 1 second\",\n      onOk() {\n        dispatch(removeTicker(stock.symbol.ticker));\n      },\n      onCancel() {},\n    });\n  };\n\n  return (\n    <MainLayoutComponent title=\"Stocks view\">\n      <div className=\"main-view\">\n        <div className=\"stock-list-container\">\n          <StocksListComponent\n            stocks={state.stocks.stocks}\n            onSelect={handleStockSelect}\n            onLongPress={handleStockLongPress}\n          />\n        </div>\n        <Link to=\"/add-stock\">\n          <Button\n            className=\"add-stock-button\"\n            type=\"primary\"\n            icon={<PlusOutlined />}\n            block\n          >\n            Add stock\n          </Button>\n        </Link>\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./StockDetailsView.css\";\nimport { Stock, Candle } from \"../../models/tinkoffTrading\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\nimport { Line } from \"react-chartjs-2\";\nimport { format, fromUnixTime } from \"date-fns\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport interface StockDetailsViewRouteParams {\n  ticker: string;\n}\n\nexport default function StockDetailsViewComponent() {\n  const params = useParams<StockDetailsViewRouteParams>();\n  const tickerRef = useRef<string>();\n  const [stock, setStock] = useState<Stock>();\n  const [candles, setCandles] = useState<Candle[]>();\n\n  useEffect(() => {\n    tickerRef.current = params.ticker;\n  });\n\n  useEffect(() => {\n    const updateStock = async () => {\n      const ticker = tickerRef.current;\n\n      if (!ticker) return;\n\n      try {\n        setStock(await tradingApi.getStock(ticker));\n        setCandles(await tradingApi.getCandles(ticker));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStock();\n  }, [tickerRef]);\n\n  const getChartData = () => ({\n    labels:\n      candles?.map((candle) =>\n        format(fromUnixTime(candle.date), \"HH:mm MM/dd\")\n      ) || [],\n    datasets: [\n      {\n        label: \"Candles\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: candles?.map((candle) => candle.c) || [],\n      },\n    ],\n  });\n\n  const chartOptions = {\n    scales: {\n      // xAxes: [\n      //   {\n      //     ticks: {\n      //       display: false,\n      //     },\n      //   },\n      // ],\n      yAxes: [\n        {\n          ticks: {\n            display: false,\n          },\n        },\n      ],\n    },\n  };\n\n  const candlesChart = (\n    <div className=\"chart-container\">\n      <Line\n        data={getChartData()}\n        options={chartOptions}\n        width={4000}\n        height={400}\n      />\n    </div>\n  );\n\n  return (\n    <MainLayoutComponent\n      title={stock?.symbol.showName}\n      subtitle={stock?.symbol.ticker}\n    >\n      <div className=\"stock-details-view\">{candles && candlesChart}</div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./AddStockView.css\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport StocksListComponent from \"../../widgets/StocksList/StocksList\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppStore } from \"../../store/store\";\nimport { addTicker } from \"../../store/tickers/actions\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\nexport default function AddStockViewComponent() {\n  const history = useHistory();\n  const [query, setQuery] = useState<string>();\n  const [stocks, setStocks] = useState<Stock[]>();\n  const debouncedQuery = useDebounce(query, 200);\n  const [, dispatch] = useAppStore();\n\n  useEffect(() => {\n    const updateStocks = async (): Promise<void> => {\n      try {\n        const stocks = await tradingApi.searchStocks(debouncedQuery);\n        setStocks(stocks);\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStocks();\n\n    return () => {\n      setStocks(undefined);\n    };\n  }, [debouncedQuery]);\n\n  const handleStockSelect = (stock: Stock) => {\n    dispatch(addTicker(stock.symbol.ticker));\n    history.push(\"/\");\n  };\n\n  return (\n    <MainLayoutComponent title=\"Add new stock\">\n      <div className=\"add-stock-view\">\n        <div className=\"search-container\">\n          <Input\n            size=\"large\"\n            placeholder=\"Enter stock ticker or name\"\n            value={query}\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            prefix={<SearchOutlined />}\n          />\n        </div>\n        <StocksListComponent stocks={stocks} onSelect={handleStockSelect} />\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport MainViewComponent from \"./views/MainView/MainView\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport StockDetailsViewComponent from \"./views/StocksDetailsView/StockDetailsView\";\nimport AddStockViewComponent from \"./views/AddStockView/AddStockView\";\n// @ts-ignore\nimport { AnimatedSwitch, spring } from \"react-router-transition\";\nimport { useAppStore } from \"./store/store\";\nimport { setTickers } from \"./store/tickers/actions\";\n\n// we need to map the `scale` prop we define below\n// to the transform style property\nfunction mapStyles(styles: any) {\n  return {\n    opacity: styles.opacity,\n    transform: `scale(${styles.scale})`,\n  };\n}\n\n// wrap the `spring` helper to use a bouncy config\nfunction bounce(val: any) {\n  return spring(val, {\n    stiffness: 330,\n    damping: 22,\n  });\n}\n\n// child matches will...\nconst bounceTransition = {\n  // start in a transparent, upscaled state\n  atEnter: {\n    opacity: 0,\n    scale: 1.2,\n  },\n  // leave in a transparent, downscaled state\n  atLeave: {\n    opacity: bounce(0),\n    scale: bounce(0.8),\n  },\n  // and rest at an opaque, normally-scaled state\n  atActive: {\n    opacity: bounce(1),\n    scale: bounce(1),\n  },\n};\n\nexport function AppComponent() {\n  const [, dispatch] = useAppStore();\n\n  useEffect(() => {\n    try {\n      const tickersJson = localStorage.getItem(\"tickers\");\n      if (!tickersJson) {\n        throw new Error();\n      }\n\n      const tickers = JSON.parse(tickersJson);\n      dispatch(setTickers(tickers));\n    } catch (e) {}\n  }, []); // eslint-disable-line\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"stocks-view-app\">\n        <AnimatedSwitch\n          atEnter={bounceTransition.atEnter}\n          atLeave={bounceTransition.atLeave}\n          atActive={bounceTransition.atActive}\n          mapStyles={mapStyles}\n          className=\"route-wrapper\"\n        >\n          <Route exact path=\"/\" component={MainViewComponent} />\n          <Route\n            path=\"/stock-details/:ticker\"\n            component={StockDetailsViewComponent}\n          />\n          <Route path=\"/add-stock\" component={AddStockViewComponent} />\n        </AnimatedSwitch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppComponent } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppComponent />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register({});\n"],"sourceRoot":""}