{"version":3,"sources":["widgets/StocksList/StocksList.tsx","api/TinkoffTradingApi.ts","layouts/MainLayout.tsx","views/MainView/MainView.tsx","views/StocksDetailsView/StockDetailsView.tsx","App.tsx","index.tsx"],"names":["StocksListComponent","props","className","loading","stocks","dataSource","renderItem","stock","Item","onClick","onSelect","handleListItemClick","key","symbol","isin","Meta","avatar","src","title","showName","description","ticker","price","value","currency","RequestMethod","TinkoffTradingApi","client","this","axios","create","baseURL","tickers","requestMethod","StocksList","country","orderType","sortType","stocksList","values","StocksGet","method","params","post","response","payload","data","Error","message","MainLayoutComponent","onBack","subTitle","subtitle","children","tradingApi","MainViewComponent","history","useHistory","useState","setStocks","useEffect","a","getStocks","console","warn","updateStocks","push","StockDetailsViewComponent","useParams","tickerRef","useRef","setStock","current","getStock","updateStock","goBack","JSON","stringify","AppComponent","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b43f2588.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Avatar } from \"antd\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport \"./StocksList.css\";\n\nexport type SelectEventHandler = (stock: Stock) => void;\n\nexport interface StocksListProps {\n  stocks: Stock[] | undefined;\n  onSelect?: SelectEventHandler;\n}\n\nexport default function StocksListComponent(props: StocksListProps) {\n  const handleListItemClick = (stock: Stock) => {\n    props.onSelect?.(stock);\n  };\n\n  const renderListItem = (stock: Stock): JSX.Element => {\n    return (\n      <List.Item\n        onClick={() => handleListItemClick(stock)}\n        className={`item`}\n        key={stock.symbol.isin}\n      >\n        <List.Item.Meta\n          avatar={\n            <Avatar\n              src={`https://static.tinkoff.ru/brands/traiding/${stock.symbol.isin}x160.png`}\n            />\n          }\n          title={stock.symbol.showName}\n          description={stock.symbol.ticker}\n        />\n        <div>\n          {stock.price.value} {stock.price.currency}\n        </div>\n      </List.Item>\n    );\n  };\n\n  return (\n    <List\n      className=\"stocks-list\"\n      loading={!props.stocks}\n      dataSource={props.stocks || []}\n      renderItem={renderListItem}\n    />\n  );\n}\n","import axios, { AxiosInstance, AxiosResponse } from \"axios\";\nimport { Stock, Response, StocksList } from \"../models/tinkoffTrading\";\n\nconst BASE_URL = \"https://api.tinkoff.ru/trading\";\n\nexport enum RequestMethod {\n  StocksList = \"stocks/list\",\n  StocksGet = \"stocks/get\",\n}\n\nexport default class TinkoffTradingApi {\n  private client!: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: BASE_URL,\n    });\n  }\n\n  async getStocks(tickers: string[]): Promise<Stock[]> {\n    const stocksList = await this.requestMethod<StocksList>(\n      RequestMethod.StocksList,\n      {\n        tickers,\n        country: \"All\",\n        orderType: \"Desc\",\n        sortType: \"ByPrice\",\n      }\n    );\n\n    return stocksList.values;\n  }\n\n  async getStock(ticker: string): Promise<Stock> {\n    return this.requestMethod(RequestMethod.StocksGet, { ticker });\n  }\n\n  private async requestMethod<T>(\n    method: RequestMethod,\n    params: any\n  ): Promise<T> {\n    const response: AxiosResponse<Response<T>> = await this.client.post(\n      method,\n      params\n    );\n\n    const payload = response.data.payload;\n\n    if (\"code\" in payload && \"message\" in payload) {\n      throw new Error(payload.message);\n    }\n\n    return payload;\n  }\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { PageHeader } from \"antd\";\nimport \"./MainLayout.css\";\n\nexport interface MainLayoutProps {\n  title: string;\n  subtitle?: string;\n  onBack?: () => void;\n}\n\nexport default function MainLayoutComponent(\n  props: PropsWithChildren<MainLayoutProps>\n) {\n  return (\n    <div className=\"main-layout\">\n      <PageHeader\n        className=\"header\"\n        onBack={props.onBack}\n        title={props.title}\n        subTitle={props.subtitle}\n      />\n      <div className=\"body\">{props.children}</div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport StocksListComponent from \"../../widgets/StocksList/StocksList\";\nimport \"./MainView.css\";\nimport { useHistory } from \"react-router-dom\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport default function MainViewComponent() {\n  const history = useHistory();\n\n  const [stocks, setStocks] = useState<Stock[]>();\n\n  useEffect(() => {\n    const updateStocks = async (): Promise<void> => {\n      try {\n        setStocks(await tradingApi.getStocks([\"GOOGL\", \"MSFT\", \"AAPL\"]));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStocks();\n  }, []);\n\n  const handleStockSelect = (stock: Stock) => {\n    history.push(`/stock-details/${stock.symbol.ticker}`);\n  };\n\n  return (\n    <MainLayoutComponent title=\"Stocks view\">\n      <div className=\"main-view\">\n        <StocksListComponent stocks={stocks} onSelect={handleStockSelect} />\n      </div>\n    </MainLayoutComponent>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport \"./StockDetailsView.css\";\nimport { Stock } from \"../../models/tinkoffTrading\";\nimport TinkoffTradingApi from \"../../api/TinkoffTradingApi\";\nimport MainLayoutComponent from \"../../layouts/MainLayout\";\n\nconst tradingApi = new TinkoffTradingApi();\n\nexport interface StockDetailsViewRouteParams {\n  ticker: string;\n}\n\nexport default function StockDetailsViewComponent() {\n  const history = useHistory();\n  const params = useParams<StockDetailsViewRouteParams>();\n  const tickerRef = useRef<string>();\n  const [stock, setStock] = useState<Stock>();\n\n  useEffect(() => {\n    tickerRef.current = params.ticker;\n  });\n\n  useEffect(() => {\n    const updateStock = async () => {\n      const ticker = tickerRef.current;\n\n      if (!ticker) return;\n\n      try {\n        setStock(await tradingApi.getStock(ticker));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    };\n\n    updateStock();\n  }, [tickerRef]);\n\n  return (\n    <MainLayoutComponent\n      title={stock?.symbol.showName || \"Stock\"}\n      subtitle={stock?.symbol.ticker}\n      onBack={() => history.goBack()}\n    >\n      <div className=\"stock-details-view\">{JSON.stringify(stock)}</div>\n    </MainLayoutComponent>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport MainViewComponent from \"./views/MainView/MainView\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StockDetailsViewComponent from \"./views/StocksDetailsView/StockDetailsView\";\n\nexport function AppComponent() {\n  return (\n    <Router>\n      <div className=\"stocks-view-app\">\n        <Switch>\n          <Route exact path=\"/\" component={MainViewComponent} />\n          <Route\n            path=\"/stock-details/:ticker\"\n            component={StockDetailsViewComponent}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppComponent } from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}